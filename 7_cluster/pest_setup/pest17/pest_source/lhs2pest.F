       program lhs2pest

! -- Program LHS2PEST writes a series of parameter value files based on
!    samples generated by the Sandia National Lab LHS program. Optionally,
!    it reconciles these with parameters cited in a PEST control file. Also
!    optionally, it writes a batch file through which repeated PEST runs can
!    be undertaken to test model outputs based on these parameters against a
!    calibration dataset, or to undertake calibration with these samples as
!    starting points.

       implicit none

       integer ifail,ierr
       integer n,n1,m,iline,i,j,itemp,icount1,icount2
       integer ipar,jpar,isamp,ipar1,ipar2
       integer nsamplhs,nparlhs,noptmax,npar
       integer pestflag,batflag,warnflag
       integer ntied
       integer lw(15),rw(15)
       double precision rtemp
       character*4 aext
       character*5 comment
       character*10 aline,anum,anum1,anum2,anum3,asamp
       character*10 precis,point
       character*12 aversion
       character*12 aapar,apar1,apar2
       character*25 atemp
       character*50 workpestbase,workpestfile
       character*256 lhsfile,qlhsfile
       character*256 randfilebase,recordfile
       character*256 pestfile,qpestfile
       character*256 batfile,qbatfile
       character*256 outfile,afile,bfile
       character*256 parfile
       character*300 cline
       character*500 amessage

       integer, allocatable :: imatch(:),transgress(:),itrans(:)
       integer, allocatable :: transgress1(:)
       double precision, allocatable :: lhsdata(:,:)
       double precision, allocatable :: lbound(:),ubound(:)
       double precision, allocatable :: scale(:),offset(:),pval(:)
       double precision, allocatable :: ppval(:)
       character*12, allocatable :: aparlhs(:),apar(:),bpar(:)


       include 'version.inc'
       write(6,5) trim(aversion)
5      format(' LHS2PEST Version ',a,'. Watermark Numerical Computing.')
#ifdef NO_CMDLINE
       write(*,*)
1      write(*,'(a)') ' ENTER COMMAND LINE ARGUMENTS > '
       read(*,'(a)',ERR=1) CLINE
#else
       call pgetcl(cline)
#endif

! -- Initialization

       workpestbase='t###'
       workpestfile=trim(workpestbase)//'.pst'
       recordfile='record.dat'

! -- The command line is parsed.

       pestflag=0
       batflag=0

       if(cline.eq.' ') go to 8900
       call spacesub(cline)
       call linesplit(ifail,2,lw,rw,cline)
       if(ifail.ne.0) go to 8900
       lhsfile=cline(lw(1):rw(1))
       call remchar(lhsfile,char(211))
       randfilebase=cline(lw(2):rw(2))
       call remchar(randfilebase,char(211))
       n=len_trim(randfilebase)
       n1=n-3
       if(n1.lt.1)n1=1
       if(n1.gt.1)then
         aext=randfilebase(n1:n)
         call lowcase(aext)
         if(aext.eq.'.par')randfilebase=randfilebase(1:n1-1)
       end if
       call linesplit(ifail,3,lw,rw,cline)
       if(ifail.ne.0) go to 100
       pestfile=cline(lw(3):rw(3))
       call remchar(pestfile,char(211))
       n=len_trim(pestfile)
       n1=n-3
       if(n1.lt.1)n1=1
       aext=pestfile(n1:n)
       call lowcase(aext)
       if(aext.ne.'.pst')pestfile=trim(pestfile)//'.pst'
       pestflag=1
       call linesplit(ifail,4,lw,rw,cline)
       if(ifail.ne.0) go to 100
       batfile=cline(lw(4):rw(4))
       call remchar(batfile,char(211))
#ifndef UNIX
       n=len_trim(batfile)
       n1=n-3
       if(n1.lt.1)n1=1
       aext=batfile(n1:n)
       call lowcase(aext)
       if(aext.ne.'.bat')then
         write(amessage,80)
80       format('The name of the requested batch file must have an ',
     +   'extension of ".bat".')
         go to 9890
       end if
       batflag=1
#endif
       call linesplit(ifail,5,lw,rw,cline)
       if(ifail.eq.0) go to 8900

#ifdef UNIX
       if(batflag.eq.1)then
         write(amessage,90)
90       format('Sorry, but the batch file writing option is ',
     +   'not supported by the UNIX version of LHS2PEST.')
         go to 9890
       end if
#endif

100    continue

! -- The LHS output file is read.

       call addquote(lhsfile,qlhsfile)
       open(unit=10,file=lhsfile,status='old',iostat=ierr)
       if(ierr.ne.0) then
         write(amessage,110) trim(qlhsfile)
110      format('Cannot open LHS output file ',a,'.')
         go to 9890
       end if
       write(6,*)
       write(6,105)
105    format(' - reading LHS output file...')

! -- We look for the "@uncertainty" section of the file.

       iline=0
       do
         iline=iline+1
         read(10,'(a)',err=9000,end=120) cline
         if(cline.eq.' ') cycle
         cline=adjustl(cline)
         if(cline(1:1).ne.'@') cycle
         n=index(cline,'$')
         if(n.ne.0)then
           cline(n:)=' '
         end if
         call lowcase(cline)
         if(cline.eq.'@uncertainty') go to 140
       end do
120    write(amessage,130) trim(qlhsfile)
130    format('Cannot find "@UNCERTAINTY" keyword in LHS output ',
     + 'file ',a,'.')
       go to 9890
140    continue

! -- We look for the "@observations" keyword.

       do
         iline=iline+1
         read(10,'(a)',err=9000,end=150) cline
         if(cline.eq.' ') cycle
         cline=adjustl(cline)
         if(cline(1:1).ne.'@') cycle
         n=index(cline,'$')
         if(n.ne.0)then
           cline(n:)=' '
         end if
         call lowcase(cline)
         if(cline(1:14).eq.'@observations ') go to 170
       end do
150    write(amessage,160) trim(qlhsfile)
160    format('Cannot find "@OBSERVATIONS" keyword following ',
     + '"@UNCERTAINTY" keyword in LHS output file ',a,'.')
       go to 9890
170    continue
       call linesplit(ifail,2,lw,rw,cline)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,180) trim(aline),trim(qlhsfile)
180      format('Cannot read number of samples following ',
     +   '"@OBSERVATIONS" keyword on line ',a,' of file ',a,'.')
         go to 9890
       end if
       call intread(ifail,cline(lw(2):rw(2)),nsamplhs)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,180) trim(aline),trim(qlhsfile)
         go to 9890
       end if
       if(nsamplhs.le.0)then
         call writint(aline,iline)
         write(amessage,182) trim(aline),trim(qlhsfile)
182      format('Number following "@OBSERVATIONS" keyword at line ',
     +   a,' of LHS output file ',a,' must be positive.')
         go to 9890
       end if

! -- We look for the "@variables" keyword.

       do
         iline=iline+1
         read(10,'(a)',err=9000,end=200) cline
         if(cline.eq.' ') cycle
         cline=adjustl(cline)
         if(cline(1:1).ne.'@') cycle
         n=index(cline,'$')
         if(n.ne.0)then
           cline(n:)=' '
         end if
         call lowcase(cline)
         if(cline(1:11).eq.'@variables ') go to 230
       end do
200    write(amessage,210) trim(qlhsfile)
210    format('Cannot find "@VARIABLES" keyword following ',
     + '"@OBSERVATIONS" keyword in LHS output file ',a,'.')
       go to 9890
230    continue
       call linesplit(ifail,2,lw,rw,cline)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,240) trim(aline),trim(qlhsfile)
240      format('Cannot read number of variables following ',
     +   '"@VARIABLES" keyword on line ',a,' of file ',a,'.')
         go to 9890
       end if
       call intread(ifail,cline(lw(2):rw(2)),nparlhs)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,240) trim(aline),trim(qlhsfile)
         go to 9890
       end if
       if(nparlhs.le.0)then
         call writint(aline,iline)
         write(amessage,242) trim(aline),trim(qlhsfile)
242      format('Number following "@VARIABLES" keyword at line ',
     +   a,' of LHS output file ',a,' must be positive.')
         go to 9890
       end if

! -- The variable names are now read.

       allocate(aparlhs(nparlhs),stat=ierr)
       if(ierr.ne.0) go to 9200
       do ipar=1,nparlhs
250      continue
         iline=iline+1
         read(10,'(a)',err=9000,end=9050) cline
         if(cline.eq.' ') go to 250
         n=index(cline,'$')
         if(n.ne.0) cline(n:)=' '
         if(cline.eq.' ') go to 250
         atemp=adjustl(cline)
         call lowcase(atemp)
         n=len_trim(atemp)
         if(atemp(n:n).eq.':')atemp(n:)=' '   ! I hope that this is the right thing to do
         n=len_trim(atemp)
         do i=1,n
           if((atemp(i:i).eq.' ').or.(atemp(i:i).eq.char(9)))then
             call writint(aline,iline)
             write(amessage,257) trim(atemp),trim(aline),trim(qlhsfile)
257          format('Parameter name "',a,'" cited at line ',a,' of ',
     +       'file ',a,' must not contain a space.')
             go to 9890
           end if
         end do
         if(n.gt.12)then
           call writint(aline,iline)
           write(amessage,260) trim(atemp),trim(aline),
     +     trim(qlhsfile)
260        format('Parameter "',a,'" cited on line ',a,' of file ',
     +     a,' is greater than 12 characters in length.')
           go to 9890
         end if
         aparlhs(ipar)=atemp
         if(ipar.gt.1)then
           do jpar=1,ipar-1
             if(atemp.eq.aparlhs(jpar))then
               call writint(aline,iline)
               write(amessage,261) trim(atemp),trim(aline),
     +         trim(qlhsfile)
261            format('Parameter name "',a,'" repeated following ',
     +         '"@VARIABLES" keyword at line ',a,' of file ',a,'.')
               go to 9890
             end if
           end do
         end if
       end do

! -- The samples are now read.

       do
         iline=iline+1
         read(10,'(a)',err=9000,end=300) cline
         if(cline.eq.' ') cycle
         cline=adjustl(cline)
         if(cline(1:1).ne.'@') cycle
         n=index(cline,'$')
         if(n.ne.0)then
           cline(n:)=' '
         end if
         call lowcase(cline)
         if(cline(1:12).eq.'@sampledata ') go to 330
       end do
300    write(amessage,310) trim(qlhsfile)
310    format('Cannot find "@SAMPLEDATA" keyword following ',
     + '"@VARIABLES" keyword in LHS output file ',a,'.')
       go to 9890
330    continue
       allocate(lhsdata(nparlhs,nsamplhs),stat=ierr)
       if(ierr.ne.0) go to 9200
       do isamp=1,nsamplhs
         read(10,*,err=9100,end=9150) i,j,(lhsdata(ipar,isamp),
     +   ipar=1,nparlhs)
         if(i.ne.isamp)then
           call writint(anum1,i)
           call writint(anum2,isamp)
           write(amessage,340) trim(anum2),trim(anum2),trim(qlhsfile),
     +     trim(anum1)
340        format('First integer on line containing values ',
     +     'for sample number ',a,' is expected to be ',a,' in ',
     +     '"@SAMPLEDATA" section of file ',a,'. Instead it is ',a,'.')
           go to 9890
         end if
         if(j.ne.nparlhs)then
           call writint(anum1,isamp)
           call writint(anum2,ipar)
           call writint(anum3,j)
           write(amessage,350) trim(anum1),trim(anum2),trim(qlhsfile),
     +     trim(anum3)
350        format('Second integer on line containing values ',
     +     'for sample number ',a,' is expected to be ',a,' in ',
     +     '"@SAMPLEDATA" section of file ',a,'. Instead it is ',a,'.')
           go to 9890
         end if
       end do

       call writint(anum1,nparlhs)
       call writint(anum2,nsamplhs)
       write(6,370) trim(anum2),trim(anum1)
370    format(' - ',a,' samples for ',a,' parameters read from ',
     + 'LHS output file.')
       close(unit=10)

! -- If a PEST control file was cited in the command line it is now opened.

       if(pestflag.eq.0) go to 570
       call addquote(pestfile,qpestfile)
       open(unit=10,file=pestfile,status='old',iostat=ierr)
       if(ierr.ne.0)then
         write(amessage,400) trim(qpestfile)
400      format('Cannot open PEST control file ',a,'.')
         go to 9890
       end if

! -- The first few lines are read.

       write(6,*)
       write(6,405)
405    format(' - reading PEST control file...')
       iline=1
       read(10,'(a)',err=9300,end=9350) cline
       cline=adjustl(cline)
       call lowcase(cline)
       if((cline(1:4).ne.'pcf ').and.(cline(1:4).ne.'jcf '))then
         write(amessage,410) trim(qpestfile)
410      format('File ',a,' does not have a "pcf" header line. It ',
     +   'does not therefore appear to be a PEST control file.')
         go to 9890
       end if
       do i=1,2
         iline=iline+1
         read(10,'(a)',err=9300,end=9350) cline
       end do
       iline=iline+1
       read(10,'(a)',err=9300,end=9350) cline
       call linesplit(ifail,1,lw,rw,cline)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,420) trim(aline),trim(qpestfile)
420      format('Error encountered in reading NPAR (number of ',
     +   'parameters) from line ',a,' of PEST control file ',a,'.')
         go to 9890
       end if
       call intread(ifail,cline(lw(1):rw(1)),npar)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,420) trim(aline),trim(qpestfile)
         go to 9890
       end if
       if(npar.le.0)then
         call writint(aline,iline)
         write(amessage,430) trim(aline),trim(qpestfile)
430      format('Zero or negative value supplied for NPAR (number ',
     +   'of parameters) at line ',a,' of PEST control file ',a,'.')
         go to 9890
       end if
       iline=iline+1
       read(10,'(a)',err=9300,end=9350) cline
       call linesplit(ifail,4,lw,rw,cline)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,432) trim(aline),trim(qpestfile)
432      format('Insufficient entries on line ',a,' of PEST ',
     +   'control file ',a,'.')
         go to 9890
       end if
       precis=cline(lw(3):rw(3))
       call lowcase(precis)
       if((precis.ne.'single').and.(precis.ne.'double'))then
         call writint(aline,iline)
         write(amessage,434) trim(aline),trim(qpestfile)
434      format('The third entry on line ',a,' of PEST control ',
     +   'file ',a,' must be "single" or "double".')
         go to 9890
       end if
       point=cline(lw(4):rw(4))
       call lowcase(point)
       if((point.ne.'point').and.(point.ne.'nopoint'))then
         call writint(aline,iline)
         write(amessage,435) trim(aline),trim(qpestfile)
435      format('The fourth entry on line ',a,' of PEST control ',
     +   'file ',a,' must be "point" or "nopoint".')
         go to 9890
       end if
       do i=1,3
         iline=iline+1
         read(10,'(a)',err=9300,end=9350) cline
       end do
       iline=iline+1
       read(10,'(a)',err=9300,end=9350) cline
       call linesplit(ifail,1,lw,rw,cline)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,426) trim(aline),trim(qpestfile)
         go to 9890
       end if
       call intread(ifail,cline(lw(1):rw(1)),noptmax)
       if(ifail.ne.0)then
         call writint(aline,iline)
         write(amessage,426) trim(aline),trim(qpestfile)
426      format('Cannot read value for NOPTMAX from line ',a,' of ',
     +   'PEST control file ',a,'.')
         go to 9890
       end if

! -- The "parameter data" section is now sought.

       do
440      continue
         iline=iline+1
         read(10,'(a)',err=9300,end=9400) cline
         cline=adjustl(cline)
         if(cline(1:1).ne.'*') cycle
         if(index(cline,'* parameter da').ne.0) go to 450
       end do
450    continue

! -- The names and some other data about the parameters are now read.

       ntied=0
       allocate(apar(npar),stat=ierr)
       if(ierr.ne.0) go to 9200
       allocate(lbound(npar),ubound(npar),scale(npar),offset(npar),
     + pval(npar),stat=ierr)
       if(ierr.ne.0) go to 9200
       allocate(itrans(npar),ppval(npar),stat=ierr)
       if(ierr.ne.0) go to 9200       
       do ipar=1,npar
460      continue
         iline=iline+1
         read(10,'(a)',err=9300,end=9450) cline
         if(cline.eq.' ') go to 460
         cline=adjustl(cline)
         if(cline(1:1).eq.'*')then
           call writint(aline,iline)
           write(amessage,470) trim(qpestfile),trim(aline)
470        format('Premature end encountered to "* parameter data" ',
     +     'section of file ',a,' at line ',a,' of this file.')
           go to 9890
         end if
         call linesplit(ifail,9,lw,rw,cline)
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,475) trim(aline),trim(qpestfile)
475        format('Insufficient entries found on line ',a,' of ',
     +     'PEST control file ',a,'.')
           go to 9890
         end if
         call drealread(ifail,cline(lw(8):rw(8)),scale(ipar))
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,476) trim(aline),trim(qpestfile)
476        format('Cannot read parameter scale from line ',a,' of ',
     +     'PEST control file ',a,'.')
           go to 9890
         end if
         call drealread(ifail,cline(lw(9):rw(9)),offset(ipar))
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,469) trim(aline),trim(qpestfile)
469        format('Cannot read parameter offset from line ',a,' of ',
     +     'PEST control file ',a,'.')
           go to 9890
         end if
         call drealread(ifail,cline(lw(5):rw(5)),lbound(ipar))
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,477) trim(aline),trim(qpestfile)
477        format('Cannot read parameter lower bound from line ',
     +     a,' of PEST control file ',a,'.')
           go to 9890
         end if
         call drealread(ifail,cline(lw(6):rw(6)),ubound(ipar))
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,478) trim(aline),trim(qpestfile)
478        format('Cannot read parameter upper bound from line ',
     +     a,' of PEST control file ',a,'.')
           go to 9890
         end if
         if(lbound(ipar).ge.ubound(ipar))then
           call writint(aline,iline)
           write(amessage,471) trim(aline),trim(qpestfile)
471        format('Upper parameter bound is not greater than ',
     +     'lower parameter bound at line ',a,' of PEST control ',
     +     'file ',a,'.')
           go to 9890
         end if
         atemp=cline(lw(2):rw(2))
         call lowcase(atemp)
         if(atemp.eq.'log')then
           itrans(ipar)=1
         else if(atemp.eq.'none')then
           itrans(ipar)=0
         else if(atemp.eq.'tied')then
           itrans(ipar)=-1
           ntied=ntied+1
         else if(atemp.eq.'fixed')then
           itrans(ipar)=-1000000
         else
           call writint(aline,iline)
           write(amessage,491) trim(aline),trim(qpestfile)
491        format('Second entry on line ',a,' of file ',a,' should ',
     +     'be "none", "log", "tied" or "fixed".')
           go to 9890
         end if
         call drealread(ifail,cline(lw(4):rw(4)),pval(ipar))
         if(ifail.ne.0)then
           call writint(aline,iline)
           write(amessage,479) trim(aline),trim(qpestfile)
479        format('Cannot read parameter value from line ',
     +     a,' of PEST control file ',a,'.')
           go to 9890
         end if
         ppval(ipar)=pval(ipar)
         if((pval(ipar).lt.lbound(ipar)).or.
     +      (pval(ipar).gt.ubound(ipar)))then
           call writint(aline,iline)
           write(amessage,481) trim(aline),trim(qpestfile)
481        format('Parameter value lies outside the range of ',
     +     'its bounds at line ',a,' of PEST control file ',a,'.')
           go to 9890
         end if
         apar(ipar)=cline(lw(1):rw(1))
         call lowcase(apar(ipar))
         if(ipar.gt.1)then
           aapar=apar(ipar)
           do jpar=1,ipar-1
             if(apar(jpar).eq.aapar)then
               write(amessage,480) trim(apar(ipar)),trim(qpestfile)
480            format('Duplicate parameter name "',a,'" in ',
     +         '"* parameter data" section of PEST control file ',
     +         a,'.')
               go to 9890
             end if
           end do
         end if
       end do
       
       if(ntied.ne.0)then
         ipar1=1
         ipar2=1         
         do i=1,ntied
492        continue
           iline=iline+1
           read(10,'(a)',err=9300,end=9500) cline
           if(cline.eq.' ') go to 492
           call lowcase(cline)
           call linesplit(ifail,2,lw,rw,cline)
           if(ifail.ne.0)then
             call writint(aline,iline)
             write(amessage,482) trim(aline),trim(qpestfile)
482          format('Two entries expected on line ',a,
     +       ' of PEST control file ',a,'.')
             go to 9890
           end if
           apar1=cline(lw(1):rw(1))
           apar2=cline(lw(2):rw(2))
           call whichone(ifail,npar,ipar1,apar,apar1)
           if(ifail.ne.0)then
             call writint(aline,iline)
             write(amessage,483) trim(apar1),trim(aline),trim(qpestfile)
483          format('Unknown parameter "',a,'" cited at line ',a,
     +       ' of PEST control file ',a,'.')
             go to 9890
           end if
           call whichone(ifail,npar,ipar2,apar,apar2)           
           if(ifail.ne.0)then
             call writint(aline,iline)
             write(amessage,483) trim(apar2),trim(aline),trim(qpestfile)
             go to 9890
           end if
           if(ipar1.eq.ipar2)then
             call writint(aline,iline)
             write(amessage,484) trim(apar1),trim(aline),trim(qpestfile)
484          format('Parameter "',a,'" must not be tied to itself ',
     +       'at line ',a,' of PEST control file ',a,'.')
             go to 9890
           end if
           if(itrans(ipar1).ne.-1)then
             call writint(aline,iline)
             write(amessage,485) trim(apar1),trim(aline),trim(qpestfile)
485          format('Parameter "',a,'" cited on line ',a,' of PEST ',
     +       'control file ',a,' is not a tied parameter.')
             go to 9890
           end if
           if(itrans(ipar2).lt.0)then
             call writint(aline,iline)
             write(amessage,486) trim(aline),trim(qpestfile)
486          format('Parameter cannot be tied to a tied or fixed ',
     +       'parameter at line ',a,' of PEST control file ',a,'.')
             go to 9890
           end if
           itrans(ipar1)=-ipar2
         end do
       end if       
       close(unit=10)
       call writint(anum,npar)
       write(6,490) trim(anum)
490    format(' - data for ',a,' parameters read from PEST control ',
     + 'file.')

! -- The nature of the match between parameters is established.

       warnflag=0
       itemp=max(nparlhs,npar)
       allocate(bpar(itemp),stat=ierr)
       if(ierr.ne.0) go to 9200
       icount1=0
       do jpar=1,nparlhs
         aapar=aparlhs(jpar)
         do ipar=1,npar
           if(aapar.eq.apar(ipar)) go to 520
         end do
         icount1=icount1+1
         bpar(icount1)=aparlhs(jpar)
       end do
520    continue
       if(icount1.eq.nparlhs)then
         write(amessage,540) trim(qlhsfile),trim(qpestfile)
540      format('None of the parameters featured in the LHS output ',
     +   'file ',a,' feature in the PEST control file ',a,'.')
         go to 9890
       end if
       if(icount1.ne.0)then
         warnflag=1
         write(6,*)
         write(6,550)
550      format(' Warning: the following LHS parameters do not feature ',
     +   'in the PEST ',/,' control file:-')
         cline=' '
         do jpar=1,icount1
           if(cline.eq.' ')then
             cline=bpar(jpar)
           else
             n=len_trim(cline)
             cline=trim(cline)//'  '//bpar(jpar)
             m=len_trim(cline)
             if(m.gt.78)then
               cline=cline(1:n)
               write(6,555) trim(cline)
555            format(1x,a)
               cline=bpar(jpar)
             end if
           end if
         end do
         if(cline.ne.' ') write(6,555) trim(cline)
       end if

       allocate(imatch(npar),stat=ierr)
       if(ierr.ne.0) go to 9200
       imatch=0             ! an array
       icount1=0
       do ipar=1,npar
         aapar=apar(ipar)
         do jpar=1,nparlhs
           if(aapar.eq.aparlhs(jpar)) then
             imatch(ipar)=jpar
             go to 530
           end if
         end do
         icount1=icount1+1
         bpar(icount1)=apar(ipar)
530      continue
       end do
       if(icount1.ne.0)then
         warnflag=1
         write(6,*)
         write(6,560)
560      format(' Warning: the following PEST parameters do not ',
     +   'feature in the LHS ',/,' output file:-')
         cline=' '
         do jpar=1,icount1
           if(cline.eq.' ')then
             cline=bpar(jpar)
           else
             n=len_trim(cline)
             cline=trim(cline)//'  '//bpar(jpar)
             m=len_trim(cline)
             if(m.gt.78)then
               cline=cline(1:n)
               write(6,555) trim(cline)
               cline=bpar(jpar)
             end if
           end if
         end do
         if(cline.ne.' ') write(6,555) trim(cline)
       end if

!       if(warnflag.ne.0)then
!         write(6,*)
!         write(6,561,advance='no')
!561      format(' Press <Enter> to continue.')
!         read(5,'(a)') atemp
!       end if

! -- The parameter value files are now written.

!    If no PEST control file has been read it is easy.

570    continue

       write(6,*)
       write(6,580)
580    format(' - writing parameter value files...')

       if(pestflag.eq.0)then
         do isamp=1,nsamplhs
           call writint(asamp,isamp)
           outfile=trim(randfilebase)//trim(asamp)//'.par'
           call addquote(outfile,afile)
           open(unit=20,file=outfile,action='write',iostat=ierr)
           if(ierr.ne.0)then
             write(amessage,600) trim(afile)
600          format('Cannot open file ',a,' for output.')
             go to 9890
           end if
           write(20,610)
610        format('single point')
           do ipar=1,nparlhs
             write(20,620) trim(aparlhs(ipar)),lhsdata(ipar,isamp)
620          format(a,t16,1pg14.7,t45,'1.0    0.0')
           end do
           close(unit=20)
         end do

! -- However if a PEST file is present then it is not quite so easly.

       else
         icount1=0
         icount2=0
         allocate(transgress(nparlhs),stat=ierr)
         if(ierr.ne.0) go to 9200
         allocate(transgress1(npar),stat=ierr)
         if(ierr.ne.0) go to 9200                           
         transgress=0  ! an array
         transgress1=0 ! an array         
         do isamp=1,nsamplhs
           call writint(asamp,isamp)
           outfile=trim(randfilebase)//trim(asamp)//'.par'
           call addquote(outfile,afile)
           open(unit=20,file=outfile,action='write',iostat=ierr)
           if(ierr.ne.0)then
             write(amessage,600) trim(afile)
             go to 9890
           end if
           write(20,650) trim(precis),trim(point)
650        format(a,3x,a)
           do ipar=1,npar
             jpar=imatch(ipar)
             if(jpar.eq.0)then
               if(itrans(ipar).eq.-1000000)then                              
                 ppval(ipar)=pval(ipar)
               else if(itrans(ipar).lt.0)then
                 continue
               end if
             else
               rtemp=lhsdata(jpar,isamp)
               if(rtemp.lt.lbound(ipar))then
                 rtemp=lbound(ipar)
                 transgress(jpar)=transgress(jpar)+1
                 icount1=icount1+1
               else if(rtemp.gt.ubound(ipar))then
                 rtemp=ubound(ipar)
                 transgress(jpar)=transgress(jpar)+1
                 icount1=icount1+1
               end if
               ppval(ipar)=rtemp
             end if
           end do
           do ipar=1,npar
             if(itrans(ipar).lt.0)then
               if(itrans(ipar).gt.-1000000)then
                 ipar2=-itrans(ipar)
                 rtemp=ppval(ipar2)*pval(ipar)/pval(ipar2)                 
                 if(rtemp.lt.lbound(ipar))then
                   rtemp=lbound(ipar)
                   transgress1(ipar)=transgress1(ipar)+1
                   icount2=icount2+1
                 else if(rtemp.gt.ubound(ipar))then
                   rtemp=ubound(ipar)
                   transgress1(ipar)=transgress1(ipar)+1
                   icount2=icount2+1
                 end if       
                 ppval(ipar)=rtemp
               end if
             end if
           end do
           do ipar=1,npar
             write(20,680) trim(apar(ipar)),ppval(ipar),
     +       scale(ipar),offset(ipar)
680          format(a,t16,1pg14.7,t45,1pg14.7,t60,1pg14.7)
           end do
           close(unit=20)
         end do
       end if

       call writint(anum,nsamplhs)
       write(6,630) trim(randfilebase),trim(anum)
630    format(' - files ',a,'[1-',a,'].par written ok.')

! -- A warning is issued if necessary.

       if(pestflag.ne.0)then
         if(icount1.gt.0)then
           write(6,*)
           write(6,660)
660        format(' Warning: sample values for the following LHS ',
     +     'parameters were altered at least',/,' once to conform ',
     +     'with parameter bounds provided in the PEST control ',
     +     'file when',/,' recording parameter value files:-')
           cline=' '
           do jpar=1,nparlhs
             if(transgress(jpar).ne.0)then
               if(cline.eq.' ')then
                 cline=aparlhs(jpar)
               else
                 n=len_trim(cline)
                 cline=trim(cline)//'  '//aparlhs(jpar)
                 m=len_trim(cline)
                 if(m.gt.78)then
                   cline=cline(1:n)
                   write(6,555) trim(cline)
                   cline=aparlhs(jpar)
                 end if
               end if
             end if
           end do
           if(cline.ne.' ') write(6,555) trim(cline)
         end if
         if(icount2.gt.0)then
           write(6,*)
           write(6,670)
670        format(' Warning: sample values for the following tied ',
     +     'parameters in existing PEST ',/' control file ',
     +     'were altered at least once to conform with ',
     +     'parameter bounds ',/,' provided in the PEST control ',
     +     'file when recording parameter value files:-')
           cline=' '
           do jpar=1,npar
             if(transgress1(jpar).ne.0)then
               if(cline.eq.' ')then
                 cline=apar(jpar)
               else
                 n=len_trim(cline)
                 cline=trim(cline)//'  '//apar(jpar)
                 m=len_trim(cline)
                 if(m.gt.78)then
                   cline=cline(1:n)
                   write(6,555) trim(cline)
                   cline=apar(jpar)
                 end if
               end if
             end if
           end do
           if(cline.ne.' ') write(6,555) trim(cline)
         end if
       end if

! -- If requested, the batch file is now written.

       if(batflag.eq.0) go to 1000
       call addquote(batfile,qbatfile)
       open(unit=20,file=batfile,action='write',iostat=ierr)
       if(ierr.ne.0)then
         write(amessage,700) trim(qbatfile)
700      format('Cannot open file ',a,' to record batch ',
     +   'commands.')
         go to 9890
       end if
       write(20,709)
709    format('@echo off')
       comment='rem'
       write(20,710) trim(comment)
710    format(a,' ',60('#'))
       cline='Delete an existing record file.'
       cline=trim(comment)//' '//trim(cline)
       write(20,720) trim(cline)
720    format(a)
       write(20,710) trim(comment)
       write(20,*)
       write(20,730) trim(recordfile)
730    format('del /P ',a)
       write(20,740) trim(recordfile)
740    format('echo > ',a)
!       write(20,750)
!750    format('pause')
       write(20,*)
       write(20,710) trim(comment)
       cline='Do all the PEST runs.'
       cline=trim(comment)//' '//trim(cline)
       write(20,720) trim(cline)
       write(20,710) trim(comment)
       write(20,*)
       call writint(anum,nsamplhs)
       write(20,760) trim(anum)
760    format('for /L %%i in (1,1,',a,') do (')
       parfile=trim(randfilebase)//'%%i'//'.par'
       call addquote(parfile,afile)
       write(20,770) trim(afile),trim(qpestfile),trim(workpestfile)
770    format('parrep ',a,' ',a,' ',a)
       afile=trim(workpestbase)//'.rec'
       write(20,775) trim(afile)
775    format('del ',a)
       write(20,780) trim(workpestfile)
780    format('pest ',a)
       afile=trim(workpestbase)//'.res'
       bfile=trim(workpestbase)//'%%i.res'
       write(20,790) trim(afile),trim(bfile)
790    format('copy ',a,' ',a)
       afile=trim(workpestbase)//'.rec'
       write(20,800) trim(afile),trim(recordfile)
800    format('phistats ',a,' %%i >> ',a)
       write(20,810)
810    format(')')
       close(unit=20)
       write(6,820) trim(qbatfile)
820    format(' - file ',a,' written ok.')

! -- A final message is written to the screen.

       call writint(anum,noptmax)
       write(6,*)
       write(6,830)
830    format(1x,79('-'))
       write(6,840)
840    format(' Note:-')
       write(6,850)
850    format(' The value for NOPTMAX for all PEST runs initiated ',
     + 'through the batch file')
       write(6,860) trim(anum)
860    format(' will be ',a,'.')
       write(6,*)
       write(6,870)
870    format(' If this is not your intention, alter NOPTMAX to an ',
     + 'appropriate value in the',/,' PEST control file supplied ',
     + 'in the command line.')
       write(6,830)

! -- All work has been done.

1000   continue

       go to 9900

8900   continue

       write(6,8910)
8910   format(/,' LHS2PEST is run using the command:',/)
       write(6,8920)
8920   format('     lhs2pest lhsfile parfilebase [pestfile] ',
     + '[batchfile]',/)
       write(6,8930)
8930   format(' where',/)
       write(6,8950)
8950   format('     lhsfile     is the name of an LHS output file,')
       write(6,8940)
8940   format('     parfilebase is a filename base for parameter ',
     + 'value files,')
       write(6,8960)
8960   format('     pestfile    is the (optional) name of a PEST ',
     + 'control file, and')
       write(6,8970)
8970   format('     batchfile   is the (optional) name for a batch ',
     + 'or script file.')

       go to 9900

9000   call writint(anum,iline)
       write(amessage,9010) trim(anum),trim(qlhsfile)
9010   format('Error encountered in reading line ',a,' of LHS output ',
     + 'file ',a,'.')
       go to 9890

9050   write(amessage,9060) trim(qlhsfile)
9060   format('End of file encountered before all variable ',
     + 'names read following "@VARIABLES" keyword in file ',a,'.')
       go to 9890

9100   call writint(anum,isamp)
       write(amessage,9110) trim(anum),trim(qlhsfile)
9110   format('Error encountered in reading values for sample ',
     + 'number ',a,' from LHS output file ',a,' in "@SAMPLEDATA" ',
     + 'section of that file.')
       go to 9890

9150   continue
       call writint(anum,isamp)
       write(amessage,9160) trim(qlhsfile),trim(anum)
9160   format('End of file ',a,' encountered while reading values for ',
     + 'sample number ',a,' from "@SAMPLEDATA" section of that file.')
       go to 9890

9200   write(amessage,9210)
9210   format('Cannot allocate memory necessary for continuation ',
     + 'of execution.')
       go to 9890

9300   continue
       call writint(anum,iline)
       write(amessage,9310) trim(anum),trim(qpestfile)
9310   format('Error encountered when reading line ',a,' of PEST ',
     + 'control file ',a,'.')
       go to 9890

9350   write(amessage,9360) trim(qpestfile)
9360   format('Premature end encountered to PEST control file ',a,'.')
       go to 9890

9400   write(amessage,9410) trim(qpestfile)
9410   format('Cannot find "* parameter data" section in ',
     + 'PEST control file ',a,'.')
       go to 9890

9450   write(amessage,9460) trim(qpestfile)
9460   format('End of file ',a,' encountered while reading ',
     + '"* parameter data" section of that file.')
       go to 9890
       
9500   write(amessage,9510) trim(qpestfile)
9510   format('End of file ',a,' encountered while reading ',
     + 'sub-section of "* parameter data" section that links tied ',
     + 'parameters to parent parameters.')
       go to 9890

9890   call write_message(amessage)

9900   continue
       close(unit=10,iostat=ierr)
       close(unit=20,iostat=ierr)

       if(allocated(imatch)) deallocate(imatch,stat=ierr)
       if(allocated(transgress)) deallocate(transgress,stat=ierr)
       if(allocated(lhsdata)) deallocate(lhsdata,stat=ierr)
       if(allocated(lbound)) deallocate(lbound,stat=ierr)
       if(allocated(ubound)) deallocate(ubound,stat=ierr)
       if(allocated(scale)) deallocate(scale,stat=ierr)
       if(allocated(offset)) deallocate(offset,stat=ierr)
       if(allocated(pval)) deallocate(pval,stat=ierr)
       if(allocated(aparlhs)) deallocate(aparlhs,stat=ierr)
       if(allocated(apar)) deallocate(apar,stat=ierr)
       if(allocated(bpar)) deallocate(bpar,stat=ierr)
       if(allocated(itrans)) deallocate(itrans,stat=ierr)
       if(allocated(transgress1)) deallocate(transgress1,stat=ierr)
       if(allocated(ppval)) deallocate(ppval,stat=ierr)

       end


        subroutine linesplit(ifail,num,lw,rw,cline)

c -- Subroutine LINESPLIT splits a line into whitespace-separated substrings.

        integer ifail,nw,nblc,j,i
        integer num
        integer lw(num),rw(num)
        character*(*) cline

        ifail=0
        nw=0
        nblc=len_trim(cline)
        if(nblc.eq.0) then
          ifail=1
          return
        end if
        j=0
5       if(nw.eq.num) return
        do 10 i=j+1,nblc
        if((cline(i:i).ne.' ').and.(cline(i:i).ne.',')
     +  .and.(ichar(cline(i:i)).ne.9)) go to 20
10      continue
        ifail=1
        return
20      nw=nw+1
        lw(nw)=i
        do 30 i=lw(nw)+1,nblc
        if((cline(i:i).eq.' ').or.(cline(i:i).eq.',')
     +  .or.(ichar(cline(i:i)).eq.9)) go to 40
30      continue
        rw(nw)=nblc
        if(nw.lt.num) ifail=1
        return
40      rw(nw)=i-1
        j=rw(nw)
        go to 5

        end


        subroutine lowcase(astrng)

C -- Subroutine LOWCASE converts a string to lower case.

        integer i,j
        character*(*) astrng

        do 10 i=1,len_trim(astrng)
        j=ichar(astrng(i:i))
        if((j.ge.65).and.(j.le.90)) astrng(i:i)=char(j+32)
10      continue
        return
        end


        subroutine addquote(afile,aqfile)

C -- Subroutine ADDQUOTE adds quotes to a filename if it has a space in it.

        character*(*) afile,aqfile
        integer nbb

        if(index(trim(afile),' ').eq.0)then
          aqfile=afile
        else
          aqfile(1:1)='"'
          aqfile(2:)=trim(afile)
          nbb=len_trim(aqfile)+1
          aqfile(nbb:nbb)='"'
        end if

        return
        end


        subroutine write_message(errmsg)

C -- Subroutine write_message formats and writes a message to the screen.

        implicit none

        integer  junit
        integer  jend,i,nblc,ierr,j
        character*(*) errmsg

        junit=6
        write(junit,*)

        j=0
        nblc=len_trim(errmsg)
5       jend=j+78
        if(jend.ge.nblc) go to 100
        do i=jend,j+1,-1
          if(errmsg(i:i).eq.' ') then
            write(junit,50,iostat=ierr) errmsg(j+1:i)
50          format(1x,a)
            j=i
            go to 5
          end if
        end do
        write(junit,50,iostat=ierr) errmsg(j+1:jend)
        j=jend
        go to 5
100     jend=nblc
        write(junit,50,iostat=ierr) errmsg(j+1:jend)
        write(junit,*)
        return

        end


        subroutine intread(ifail,cline,itemp)

C -- Subroutine INTREAD reads a real number from a string.

        integer ifail
        integer itemp
        character*6 afmt
        character*(*) cline

        ifail=0
        afmt='(i   )'
        write(afmt(3:5),'(i3)') len(cline)
        read(cline,afmt,err=100) itemp
        return

100     ifail=1
        return
        end


        subroutine writint(atemp,ival)

c       Subroutine WRITINT writes an integer to a character variable.

        integer*4 ival
        character*6 afmt
        character*(*) atemp

        afmt='(i   )'
        write(afmt(3:5),'(i3)') len(atemp)
        write(atemp,afmt)ival
        atemp=adjustl(atemp)
        return
        end



        subroutine drealread(ifail,cline,rtemp)

C -- Subroutine DREALREAD reads a double precision number from a string.

        integer ifail
        double precision rtemp
        character*8 afmt
        character*(*) cline

        ifail=0
        afmt='(f   .0)'
        write(afmt(3:5),'(i3)') len(cline)
        read(cline,afmt,err=100) rtemp
        return

100     ifail=1
        return
        end


        subroutine whichone(ifail,npar,ipar,apar,tpar)

C -- Subroutine whichone locates a string in an array. Note that both the
C    search string and the existing array of strings are assumed to be
C    in the same case.

        integer npar,ipar,i
        integer ifail
        character*(*) tpar
        character*(*) apar(npar)

        ifail=0
        if((ipar.lt.1).or.(ipar.gt.npar)) ipar=1
        if(tpar.eq.apar(ipar)) return
        if(ipar.ne.npar)then
          do 20 i=ipar+1,npar
          if(tpar.eq.apar(i))then
            ipar=i
            return
          end if
20        continue
        end if
        if(ipar.ne.1)then
          do 40 i=ipar-1,1,-1
          if(tpar.eq.apar(i)) then
            ipar=i
            return
          end if
40        continue
        end if
        ifail=1
        return
        end
